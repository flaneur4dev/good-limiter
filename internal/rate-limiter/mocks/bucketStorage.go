// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	contracts "github.com/flaneur4dev/good-limiter/internal/contracts"
	mock "github.com/stretchr/testify/mock"
)

// BucketStorage is an autogenerated mock type for the bucketStorage type
type BucketStorage struct {
	mock.Mock
}

type BucketStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *BucketStorage) EXPECT() *BucketStorage_Expecter {
	return &BucketStorage_Expecter{mock: &_m.Mock}
}

// AddBucket provides a mock function with given fields: ctx, key, b
func (_m *BucketStorage) AddBucket(ctx context.Context, key string, b contracts.Bucket) error {
	ret := _m.Called(ctx, key, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, contracts.Bucket) error); ok {
		r0 = rf(ctx, key, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BucketStorage_AddBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBucket'
type BucketStorage_AddBucket_Call struct {
	*mock.Call
}

// AddBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - b contracts.Bucket
func (_e *BucketStorage_Expecter) AddBucket(ctx interface{}, key interface{}, b interface{}) *BucketStorage_AddBucket_Call {
	return &BucketStorage_AddBucket_Call{Call: _e.mock.On("AddBucket", ctx, key, b)}
}

func (_c *BucketStorage_AddBucket_Call) Run(run func(ctx context.Context, key string, b contracts.Bucket)) *BucketStorage_AddBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(contracts.Bucket))
	})
	return _c
}

func (_c *BucketStorage_AddBucket_Call) Return(_a0 error) *BucketStorage_AddBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BucketStorage_AddBucket_Call) RunAndReturn(run func(context.Context, string, contracts.Bucket) error) *BucketStorage_AddBucket_Call {
	_c.Call.Return(run)
	return _c
}

// Bucket provides a mock function with given fields: ctx, key
func (_m *BucketStorage) Bucket(ctx context.Context, key string) (contracts.Bucket, bool) {
	ret := _m.Called(ctx, key)

	var r0 contracts.Bucket
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (contracts.Bucket, bool)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) contracts.Bucket); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contracts.Bucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// BucketStorage_Bucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bucket'
type BucketStorage_Bucket_Call struct {
	*mock.Call
}

// Bucket is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *BucketStorage_Expecter) Bucket(ctx interface{}, key interface{}) *BucketStorage_Bucket_Call {
	return &BucketStorage_Bucket_Call{Call: _e.mock.On("Bucket", ctx, key)}
}

func (_c *BucketStorage_Bucket_Call) Run(run func(ctx context.Context, key string)) *BucketStorage_Bucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BucketStorage_Bucket_Call) Return(_a0 contracts.Bucket, _a1 bool) *BucketStorage_Bucket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BucketStorage_Bucket_Call) RunAndReturn(run func(context.Context, string) (contracts.Bucket, bool)) *BucketStorage_Bucket_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBucket provides a mock function with given fields: ctx, key
func (_m *BucketStorage) DeleteBucket(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BucketStorage_DeleteBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucket'
type BucketStorage_DeleteBucket_Call struct {
	*mock.Call
}

// DeleteBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *BucketStorage_Expecter) DeleteBucket(ctx interface{}, key interface{}) *BucketStorage_DeleteBucket_Call {
	return &BucketStorage_DeleteBucket_Call{Call: _e.mock.On("DeleteBucket", ctx, key)}
}

func (_c *BucketStorage_DeleteBucket_Call) Run(run func(ctx context.Context, key string)) *BucketStorage_DeleteBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BucketStorage_DeleteBucket_Call) Return(_a0 error) *BucketStorage_DeleteBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BucketStorage_DeleteBucket_Call) RunAndReturn(run func(context.Context, string) error) *BucketStorage_DeleteBucket_Call {
	_c.Call.Return(run)
	return _c
}

// NewBucketStorage creates a new instance of BucketStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBucketStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *BucketStorage {
	mock := &BucketStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
