// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Bucket is an autogenerated mock type for the Bucket type
type Bucket struct {
	mock.Mock
}

type Bucket_Expecter struct {
	mock *mock.Mock
}

func (_m *Bucket) EXPECT() *Bucket_Expecter {
	return &Bucket_Expecter{mock: &_m.Mock}
}

// Allow provides a mock function with given fields:
func (_m *Bucket) Allow() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Bucket_Allow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allow'
type Bucket_Allow_Call struct {
	*mock.Call
}

// Allow is a helper method to define mock.On call
func (_e *Bucket_Expecter) Allow() *Bucket_Allow_Call {
	return &Bucket_Allow_Call{Call: _e.mock.On("Allow")}
}

func (_c *Bucket_Allow_Call) Run(run func()) *Bucket_Allow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Bucket_Allow_Call) Return(_a0 bool) *Bucket_Allow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_Allow_Call) RunAndReturn(run func() bool) *Bucket_Allow_Call {
	_c.Call.Return(run)
	return _c
}

// LastUse provides a mock function with given fields:
func (_m *Bucket) LastUse() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Bucket_LastUse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastUse'
type Bucket_LastUse_Call struct {
	*mock.Call
}

// LastUse is a helper method to define mock.On call
func (_e *Bucket_Expecter) LastUse() *Bucket_LastUse_Call {
	return &Bucket_LastUse_Call{Call: _e.mock.On("LastUse")}
}

func (_c *Bucket_LastUse_Call) Run(run func()) *Bucket_LastUse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Bucket_LastUse_Call) Return(_a0 time.Time) *Bucket_LastUse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_LastUse_Call) RunAndReturn(run func() time.Time) *Bucket_LastUse_Call {
	_c.Call.Return(run)
	return _c
}

// Period provides a mock function with given fields:
func (_m *Bucket) Period() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Bucket_Period_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Period'
type Bucket_Period_Call struct {
	*mock.Call
}

// Period is a helper method to define mock.On call
func (_e *Bucket_Expecter) Period() *Bucket_Period_Call {
	return &Bucket_Period_Call{Call: _e.mock.On("Period")}
}

func (_c *Bucket_Period_Call) Run(run func()) *Bucket_Period_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Bucket_Period_Call) Return(_a0 time.Duration) *Bucket_Period_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_Period_Call) RunAndReturn(run func() time.Duration) *Bucket_Period_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Bucket) Stop() {
	_m.Called()
}

// Bucket_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Bucket_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Bucket_Expecter) Stop() *Bucket_Stop_Call {
	return &Bucket_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Bucket_Stop_Call) Run(run func()) *Bucket_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Bucket_Stop_Call) Return() *Bucket_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *Bucket_Stop_Call) RunAndReturn(run func()) *Bucket_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewBucket creates a new instance of Bucket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBucket(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bucket {
	mock := &Bucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
